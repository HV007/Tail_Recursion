(* User  declarations *)
fun lookup "special" = 1000
  | lookup s = 0 

%%
(* required declarations *)
%name Tail

%term
  ID of string | NUM of int | CONST of bool
| ADD | SUB | DIV | LESSTHAN | GREATERTHAN | ANDALSO | ORELSE | XOR
| NEGATE | NOT | IF | THEN | ELSE
| FUN | DATATYPE | AND | OF | RPAREN | LPAREN | EOF
| TIMES | ASSIGN | BAR | COMMA | COLON

%nonterm EXPRESSION of AST.exp | ARGUMENTLIST of (AST.exp list) | REWRITE of AST.Rewrite | FUNCTION of AST.Rewrite list
| FUNCTIONLIST of (AST.Rewrite list) list | FUNCTIONDECLARATION of (AST.Rewrite list) list | FUNCTIONDECLARATIONLIST of ((AST.Rewrite list) list) list 
| TYPELIST of string list | CONSTRUCTOR of AST.ConstructorDef
| CONSTRUCTORLIST of AST.ConstructorDef list | DATATYPEDEFINITION of AST.Datatype | DATATYPEDEFINITIONLIST of AST.Datatype list
| DATATYPEDECLARATION of AST.Datatype list | PROGRAM of AST.Program | BINOP of AST.binop | UNOP of AST.unop

%pos int

(*optional declarations *)
%eop EOF
%noshift EOF

(* %header  *)

%start PROGRAM

%verbose

%%

  PROGRAM: DATATYPEDECLARATION FUNCTIONDECLARATIONLIST (AST.ProgramDef(DATATYPEDECLARATION, FUNCTIONDECLARATIONLIST))
  | FUNCTIONDECLARATIONLIST (AST.ProgramDef([], FUNCTIONDECLARATIONLIST))

  DATATYPEDECLARATION: DATATYPE DATATYPEDEFINITIONLIST (DATATYPEDEFINITIONLIST)
  DATATYPEDEFINITIONLIST: DATATYPEDEFINITIONLIST AND DATATYPEDEFINITION (DATATYPEDEFINITIONLIST @ [DATATYPEDEFINITION])
  | DATATYPEDEFINITION ([DATATYPEDEFINITION])
  DATATYPEDEFINITION: ID ASSIGN CONSTRUCTORLIST (AST.DatatypeDef(ID, CONSTRUCTORLIST))

  CONSTRUCTORLIST: CONSTRUCTORLIST BAR CONSTRUCTOR (CONSTRUCTORLIST @ [CONSTRUCTOR])
  | CONSTRUCTOR ([CONSTRUCTOR])
  CONSTRUCTOR: ID OF TYPELIST (AST.AppDef(ID, TYPELIST))
  | ID (AST.BaseDef(ID))

  TYPELIST: TYPELIST TIMES ID (TYPELIST @ [ID])
  | ID ([ID])

  FUNCTIONDECLARATIONLIST: FUNCTIONDECLARATION ([FUNCTIONDECLARATION])
  | FUNCTIONDECLARATIONLIST FUNCTIONDECLARATION (FUNCTIONDECLARATIONLIST @ [FUNCTIONDECLARATION])

  FUNCTIONDECLARATION: FUN FUNCTIONLIST (FUNCTIONLIST)
  FUNCTIONLIST: FUNCTIONLIST AND FUNCTION (FUNCTIONLIST @ [FUNCTION])
  | FUNCTION ([FUNCTION])

  FUNCTION: FUNCTION BAR REWRITE (FUNCTION @ [REWRITE])
  | REWRITE ([REWRITE])

  REWRITE: ID LPAREN ARGUMENTLIST RPAREN ASSIGN EXPRESSION (AST.RewriteRule(ID, ARGUMENTLIST, EXPRESSION))
  ARGUMENTLIST: ARGUMENTLIST COMMA EXPRESSION (ARGUMENTLIST @ [EXPRESSION])
  | EXPRESSION ([EXPRESSION])

  BINOP: ADD (AST.Add) | SUB (AST.Sub) | TIMES (AST.Mul) | DIV (AST.Div) | ASSIGN (AST.Equals) | LESSTHAN (AST.LessThan) | GREATERTHAN (AST.GreaterThan) | ANDALSO (AST.And) | ORELSE (AST.Or) | XOR (AST.Xor)
  UNOP: NEGATE (AST.Negate) | NOT (AST.Not)

  EXPRESSION: NUM (AST.NumExp(NUM, ["UNDEFINED"]))
  | NUM COLON TYPELIST (AST.NumExp(NUM, TYPELIST))
  | CONST (AST.BoolExp(CONST, ["UNDEFINED"]))
  | CONST COLON TYPELIST (AST.BoolExp(CONST, TYPELIST))
  | EXPRESSION BINOP EXPRESSION (AST.BinExp(BINOP, EXPRESSION1, EXPRESSION2, ["UNDEFINED"]))
  | UNOP EXPRESSION (AST.UnExp(UNOP, EXPRESSION, ["UNDEFINED"]))
  | IF EXPRESSION THEN EXPRESSION ELSE EXPRESSION (AST.IfExp(EXPRESSION1, EXPRESSION2, EXPRESSION3, ["UNDEFINED"]))
  | ID LPAREN ARGUMENTLIST RPAREN COLON TYPELIST (AST.AppExp(ID, ARGUMENTLIST, TYPELIST))
  | ID LPAREN ARGUMENTLIST RPAREN (AST.AppExp(ID, ARGUMENTLIST, ["UNDEFINED"]))
  | ID COLON TYPELIST (AST.BaseExp(ID, TYPELIST))
  | ID (AST.BaseExp(ID, ["UNDEFINED"]))
  | LPAREN EXPRESSION RPAREN (EXPRESSION)